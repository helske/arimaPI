{
    "contents" : "#' Compute a theoretical autocovariance function of ARMA process\n#'\n#' Function \\code{acv_arma} computes a theoretical autocovariance function of ARMA process.\n#'\n#' @export\n#' @rdname acv_arma\n#' @name acv_arma\n#' @seealso \\code{\\link{dacv_arma}}.\n#\n#' @param phi vector containing the AR parameters\n#' @param theta vector containing the MA parameters\n#' @param n length of the time series\n#' @return vector of length n containing the autocovariances\nacv_arma<-  function(phi,theta,n){\n  acv <- numeric(n)\n  model <- SSMarima(phi,theta,n=1)\n  Tt<-model$T\n  prodtp<-model$P1\n  acv[1]<- prodtp[1]\n  for(i in 2:n){\n    prodtp<-Tt%*%prodtp\n    acv[i]<-prodtp[1]\n  }\n  acv\n}\n\n#' Compute the partial derivatives of theoretical autocovariance function of ARMA process\n#'\n#' Function \\code{dacv_arma} computes the partial derivatives of theoretical autocovariance function of ARMA process\n#'\n#' @export\n#' @rdname dacv_arma\n#' @seealso \\code{\\link{acv_arma}}.\n#\n#' @param phi vector containing the AR parameters\n#' @param theta vector containing the MA parameters\n#' @param n length of the time series\n#' @return matrix containing the partial derivatives autocovariances,\n#' each column corresponding to one parameter of vector (phi,theta) (in that order)\ndacv_arma<-function(phi,theta,n){\n  model<-SSMarima(phi,theta,n=1)\n  p<-length(phi)\n  q<-length(theta)\n  dV<-matrix(0,n,p+q)\n\n  Tt<-model$T\n  m<-dim(Tt)[1]\n  m2<-m^2\n  kroneckerTtTt<-diag(m2)-kronecker(Tt,Tt)\n  if(p>0){\n    dTt<-matrix(0,m,m)\n    kroneckerTtdTt<-matrix(0,m2,m2)\n    for(i in 1:p){\n      dTt[]<-0\n      kroneckerTtdTt[]<-0\n      dTt[i,1]<-1\n      for(j in 1:m)\n        for(k in 1:m)\n          kroneckerTtdTt[(j-1)*m+i,(k-1)*m+1]<-Tt[j,k]\n      kroneckerTtdTt[((i-1)*m+1):(i*m),1:m] <- kroneckerTtdTt[((i-1)*m+1):(i*m),1:m] + Tt\n\n      prodTtP1<-model$P1\n      dProdTtP1<-matrix(solve(kroneckerTtTt,kroneckerTtdTt%*%c(prodTtP1)),m,m)\n      dV[1,i]<-dProdTtP1[1]\n      for(t in 2:n){\n        dProdTtP1<-Tt%*%dProdTtP1+dTt%*%prodTtP1\n        dV[t,i]<-dProdTtP1[1]\n        prodTtP1<-Tt%*%prodTtP1\n      }\n    }\n  }\n  if(q>0){\n    Rt<-model$R\n    dRtRt<-matrix(0,m,m)\n    for(i in 1:q){\n      dRtRt[]<-0\n      dRtRt[i+1,]<-Rt\n      dProdTtP1<-matrix(solve(kroneckerTtTt,c(dRtRt+t(dRtRt))),m,m)\n      dV[1,p+i]<-dProdTtP1[1]\n      for(t in 2:n){\n        dProdTtP1<-Tt%*%dProdTtP1\n        dV[t,p+i]<-dProdTtP1[1]\n      }\n    }\n  }\n  dV\n}\n\n",
    "created" : 1441984677430.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2177608420",
    "id" : "C79FF960",
    "lastKnownWriteTime" : 1441984715,
    "path" : "D:/repos/arimaPI/R/acv_arma.R",
    "project_path" : "R/acv_arma.R",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "type" : "r_source"
}